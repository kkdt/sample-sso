#!/bin/bash
#
# Copyright (C) 2018 thinh ho
# This file is part of 'sample-sso' which is released under the MIT license.
# See LICENSE at the project root directory.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

which keytool &>/dev/null
[ $? -eq 0 ] || { echo "keytool command not found."; exit 1; }

# https://docs.oracle.com/javase/7/docs/technotes/tools/solaris/keytool.html
# The following command creates the certificate e1 and stores it in the file e1.cert, 
# which is signed by ca2. As a result, e1 should contain ca, ca1, and ca2 in its certificate chain:
#    keytool -alias e1 -certreq | keytool -alias ca2 -gencert > e1.cert
# CN=cName, OU=orgUnit, O=org, L=city, S=state, C=countryCode


server=$(hostname)
serverAlias=server
cap12=${DIR}/ca.p12
cacert=${DIR}/ca.cer
serverp12=${DIR}/server.p12
servercsr=${DIR}/${server}.csr
servercer=${DIR}/${server}.cer
storepass=changeit
caAlias=kkdtCA

# remove any existing artifacts
rm -f ${cap12}
rm -f ${cacert}
rm -f ${serverp12}
rm -f ${servercsr}
rm -f ${serverjks}

echo "Generating CA: ${cap12}"
keytool -genkeypair -alias ${caAlias} -storetype PKCS12 -keyalg RSA -keysize 2048 \
    -keystore ${cap12} -validity 365 \
    -dname "CN=kkdt.github.com,OU=kkdt,O=kkdt,L=Fairfax,S=VA,C=US" \
    -storepass ${storepass}

echo "CA X509 certificate: ${cacert}"
keytool -export -alias ${caAlias} -keystore ${cap12} -rfc --storepass changeit -file ${cacert}

echo "Generating server: ${serverp12}"
keytool -genkeypair -alias ${serverAlias} -storetype PKCS12 -keyalg RSA -keysize 2048 \
    -keystore ${serverp12} -validity 3650 \
    -dname "CN=${server},OU=kkdt,O=kkdt,L=Fairfax,S=VA,C=US" \
    -storepass ${storepass}

echo "Create csr: ${servercsr}"
keytool -certreq -alias ${serverAlias} -keystore ${serverp12} -file ${servercsr} --storepass changeit \
    -ext "san=dns:${server},dns:localhost,ip:127.0.0.1" \
    -storetype PKCS12

echo "Signing csr: ${servercer}"
keytool -alias ${caAlias} -keystore ${cap12} -storepass ${storepass} -gencert \
    -keyalg RSA -storetype PKCS12 -rfc \
    -infile ${servercsr} -outfile ${servercer} \
    -ext "san=dns:${server},dns:localhost,ip:127.0.0.1" \
    -validity 365

echo "Creating server keystore: ${serverjks}"
#keytool -import -trustcacerts -alias ${caAlias} -keystore ${serverjks} \
#    -storepass ${storepass} -storetype JKS \
#    -file ${cacert} -noprompt
#keytool -import -trustcacerts -alias ${serverAlias} -keystore ${serverjks} \
#    -storepass ${storepass} -keypass ${storepass} -storetype JKS \
#    -file ${servercer} -noprompt

keytool -import -trustcacerts -alias ${caAlias} -keystore ${serverp12} \
    -storetype PKCS12 -storepass ${storepass} \
    -file  ${cacert} -noprompt
keytool -import -trustcacerts -alias ${serverAlias} -keystore ${serverp12} \
    -storetype PKCS12 -storepass ${storepass} \
    -file  ${servercer} 


